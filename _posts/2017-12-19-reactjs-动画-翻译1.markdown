---
layout: post
title:  "reactjs 动画 翻译1"
date:   2017-12-19 21:26:49 +0800
categories:  
tags: 
---
 
```powershell
npm install --save react-transition-group 
```

source from [react-transition-group](https://www.pshrmn.com/tutorials/react/animation/react-transition-group/)

# React Transition Group

[On GitHub](https://github.com/reactjs/react-transition-group)

    npm install --save react-transition-group

1. [About](#about)
2. [How It Works](#how)
3. [CSSTransitionGroup Props](#props)
4. [A Small Example](#example)

## About

    React Transition Group provides components to make animation of entering and leaving components simple. The library provides a low-level `<TransitionGroup>` component, but most likely you will use the higher-level `<CSSTransitionGroup>` component, so the rest of this tutorial will use `<CSSTransitionGroup>`

    When a component unmounts, it will still be rendered in the DOM until its leaving animation has finished.
  

## How

`<CSSTransitionGroup>` keeps track of the elements are passed to it through its `children` prop. Each element is tracked through its `key` prop.
  

    const AnimatedComponent =()=>(<CSSTransitionGroup><Item key="one">One</Item><Item key="two">Two</Item></CSSTransitionGroup>)// knownKeys = ['one', 'two']

    In its state, the `<CSSTransitionGroup>` maintains a list of all of its children. Whenever the `<CSSTransitionGroup>` updates, it compares the keys of its new `children` prop to the ones stored in state. Doing this, it creates two arrays: one which contains entering elements (their key was not in the existing element list) and one which contains leaving elements (their key was not in the new `children` elements).
  

    const AnimatedComponent =()=>(<CSSTransitionGroup><Item key="one">One</Item><Item key="three">Three</Item></CSSTransitionGroup>)// knownKeys = ['one', 'two']// updateKeys = ['one', 'three']// enteringKeys = ['three']// leavingKeys = ['two']

    Instead of rendering its `children` prop, the `<CSSTransitionGroup>` renders all of the elements that it has stored in its state. Each element is actually first passed to a `childFactory` prop function, which allows you to wrap the elements in another components. The `<CSSTransitionGroup>` wraps each of its children elements in a `CSSTransitionGroupChild`.
  

    For each element that is entering, its `componentWillEnter` method is called (if it has one). `CSSTransitionGroupChild` has a `componentWillEnter` method that will add a class to the rendered element that indicates that it is entering. Similarly, each leaving element will call its `componentWillLeave` method, which adds a class indicating that the rendered element is leaving. The full class that is passed to them will be based on the name of the transition, which is set as a prop of the `<CSSTransitionGroup>`

    const AnimatedComponent =()=>(<CSSTransitionGroup
        transitionName='fade'><Item key="one"/><Item key="three"/></CSSTransitionGroup>)// assuming Item renders a div, the following will be rendered:// <div>One</div>// <div class="example-leave">Two</div>// <div class="example-enter">Three</div>

    On the next animation frame, each entering and leaving element will also be given an "active" class based on their action. Delaying until the next animation frame will ensure that the starting CSS values are applied to the element before beginning the transition.
  

    // <div class="example-leave example-leave-active">Two</div>// <div class="example-enter example-enter-active">Three</div>

## Props

    The `<CSSTransitionGroup>` can take a number of props to configure the animating of entering and leaving nodes. Also, previously unmentioned, you can animate "appearing" nodes. These are the children that are rendered when the `<CSSTransitionGroup>` is mounted.
  

    <CSSTransitionGroup
      // the name of the transition will be used as part of// the class used to describe the transition// with the name of "fade", an entering element will// be given the class of "fade-enter"
      transitionName='fade'// alternatively, you can specify the class for each// transition type
      transitionName=\{\{
        enter:'hello',
        enterActive:'hello-world',
        leave:'goodbye',...
        appearActive:'whoa'\}\}// pass a boolean to specify whether a transition// should be used. Below are the default values.
      transitionAppear={false}
      transitionEnter={true}
      transitionLeave={true}// Specify the length of the transition. The transition// classes will be removed after the duration (in ms)
      transitionEnterTimeout={1000}
      transitionLeaveTimeout={500}
      transitoinEnterTimeout={250}></CSSTransitionGroup>

## A Small Example

    Below is an example application that fades elements in as the enter and out as they leave. You can see it in action on [codepen](http://codepen.io/pshrmn/pen/MJoGvg).
  

    .fade-enter{opacity: 0.01;}.fade-enter-active{opacity: 1;transition: opacity 1s;}.fade-leave{opacity: 1;}.fade-leave-active{opacity: 0;transition: opacity 0.5s;}

    import React from'react'import ReactDOM from'react-dom'import{ CSSTransitionGroup }from'react-transition-group'const Fader =({ children })=>(<CSSTransitionGroup
        transitionName='fade'
        transitionEnterTimeout={1000}
        transitionLeaveTimeout={500}>{ children }</CSSTransitionGroup>)classPickerextendsReact.Component{constructor(props){super(props)this.state ={
          people:[]}}render(){return(<ul><Fader>{this.state.people.map(p =><li key={p}>{p}</li>)}</Fader></ul>)}componentDidMount(){// every 2 seconds, change the list of peoplethis.interval =setInterval(()=>{this.setState({
            people:this.props.names
              .map(n => Math.random()>0.5? n :null).filter(n => n !==null)})},2000)}}const names =['Betty','Sue','Aaron','Jamal','Ann']
    ReactDOM.render(<Picker names={names}/>, document.getElementById('root'))
