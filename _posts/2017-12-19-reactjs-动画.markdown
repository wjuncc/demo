---
layout: post
title:  "reactjs 动画"
date:   2017-12-19 21:26:49 +0800
categories:  
tags: 
---

# reactjs 动画 #

ReactTransitionGroup 教程

6月25日。
Jun 25

	import * as Animated from "animated/lib/targets/react-dom"; 

React Transition Group
反应过渡组
On GitHub
在GitHub上
npm install --save react-transition-group
npm install --save react-transition-group
About
关于
How It Works
怎么运行的
CSSTransitionGroup Props
CSSTransitionGroup道具
A Small Example
一个小例子
About
关于
React Transition Group provides components to make animation of entering and leaving components simple.
反应过渡组提供组件来简化进入和离开组件的动画。
The library provides a low-level <TransitionGroup> component, but most likely you will use the higher-level <CSSTransitionGroup> component, so the rest of this tutorial will use <CSSTransitionGroup>
该库提供了一个低级的<TransitionGroup>组件，但很可能您将使用更高级别的<CSSTransitionGroup>组件，因此本教程的其余部分将使用<CSSTransitionGroup>

When a component unmounts, it will still be rendered in the DOM until its leaving animation has finished.
当组件卸载时，它仍然会在DOM中呈现，直到其离开动画结束。

How
怎么样
<CSSTransitionGroup> keeps track of the elements are passed to it through its children prop.
<CSSTransitionGroup>跟踪通过其子项目传递给它的元素。
Each element is tracked through its key prop.
每个元素都通过其关键支柱进行跟踪。

const AnimatedComponent = () => (
const AnimatedComponent =（）=>（
<CSSTransitionGroup>
<CSSTransitionGroup>
<Item key="one">One</Item>
<Item key =“one”> One </ Item>
<Item key="two" >Two</Item>
<Item key =“two”> Two </ Item>
</CSSTransitionGroup>
</ CSSTransitionGroup>
)
）
// knownKeys = ['one', 'two']
// knownKeys = ['one'，'two']
In its state, the <CSSTransitionGroup> maintains a list of all of its children.
在它的状态下，<CSSTransitionGroup>维护它的所有孩子的列表。
Whenever the <CSSTransitionGroup> updates, it compares the keys of its new children prop to the ones stored in state.
每当<CSSTransitionGroup>更新时，它都会比较新的子项目和存储在状态中的项目。
Doing this, it creates two arrays :  one which contains entering elements (their key was not in the existing element list) and one which contains leaving elements (their key was not in the new children elements).
这样做，它会创建两个包含输入元素（其键不在新元素列表中）的数组和一个包含离开元素（它们的键不在新子元素中）的数组。

const AnimatedComponent = () => (
const AnimatedComponent =（）=>（
<CSSTransitionGroup>
<CSSTransitionGroup>
<Item key="one">One</Item>
<Item key =“one”> One </ Item>
<Item key="three">Three</Item>
<Item key =“three”> Three </ Item>
</CSSTransitionGroup>
</ CSSTransitionGroup>
)
）
// knownKeys = ['one', 'two']
// knownKeys = ['one'，'two']
// updateKeys = ['one', 'three']
// updateKeys = ['one'，'three']
// enteringKeys = ['three']
// enteredKeys = ['three']
// leavingKeys = ['two']
// leavingKeys = ['two']
Instead of rendering its children prop, the <CSSTransitionGroup> renders all of the elements that it has stored in its state.
<CSSTransitionGroup>不是呈现其子项道具，而是呈现其存储在其状态中的所有元素。
Each element is actually first passed to a childFactory prop function, which allows you to wrap the elements in another components.
每个元素实际上首先传递给一个childFactory prop函数，它允许你将元素包装在另一个组件中。 
The <CSSTransitionGroup> wraps each of its children elements in a CSSTransitionGroupChild.
<CSSTransitionGroup>将其每个子元素封装在一个CSSTransitionGroupChild中。

For each element that is entering, its componentWillEnter method is called (if it has one).
对于每个输入的元素，它的componentWillEnter方法被调用（如果有的话）。 
CSSTransitionGroupChild has a componentWillEnter method that will add a class to the rendered element that indicates that it is entering.
CSSTransitionGroupChild有一个componentWillEnter方法，它将向渲染的元素添加一个类，指示它正在进入。
Similarly, each leaving element will call its componentWillLeave method, which adds a class indicating that the rendered element is leaving.
类似地，每个离开元素将调用其componentWillLeave方法，该方法添加一个类，指示呈现的元素正在离开。
The full class that is passed to them will be based on the name of the transition, which is set as a prop of the <CSSTransitionGroup>
传递给它们的完整类将基于过渡的名称，该过渡的名称被设置为<CSSTransitionGroup>

const AnimatedComponent = () => (
const AnimatedComponent =（）=>（
<CSSTransitionGroup
<CSSTransitionGroup
transitionName='fade'
transitionName = '淡入'
>
>
<Item key="one" />
<Item key =“one”/>
<Item key="three" />
<Item key =“three”/>
</CSSTransitionGroup>
</ CSSTransitionGroup>
)
）
// assuming Item renders a div, the following will be rendered :
//假设Item呈现一个div，下面将呈现:
// <div>One</div>
// <div>一个</ div>
// <div class="example-leave">Two</div>
// <div class =“example-leave”> Two </ div>
// <div class="example-enter">Three</div>
// <div class =“example-enter”> Three </ div>
On the next animation frame, each entering and leaving element will also be given an "active" class based on their action.
在下一个动画框架中，每个进入和离开元素也将根据他们的动作被赋予“主动”类。
Delaying until the next animation frame will ensure that the starting CSS values are applied to the element before beginning the transition.
延迟到下一个动画帧将确保在开始转换之前将CSS起始值应用于元素。

// <div class="example-leave example-leave-active">Two</div>
// <div class =“example-leave example-leave-active”>两个</ div>
// <div class="example-enter example-enter-active">Three</div>
// <div class =“example-enter example-enter-active”> Three </ div>
Props
道具
The <CSSTransitionGroup> can take a number of props to configure the animating of entering and leaving nodes.
<CSSTransitionGroup>可以使用一些道具来配置进入和离开节点的动画。
Also, previously unmentioned, you can animate "appearing" nodes.
此外，以前未提及的，你可以动画“出现”节点。
These are the children that are rendered when the <CSSTransitionGroup> is mounted.
这些是在安装<CSSTransitionGroup>时呈现的子项。

<CSSTransitionGroup
<CSSTransitionGroup
// the name of the transition will be used as part of
//过渡的名称将被用作一部分
// the class used to describe the transition
//用于描述转换的类
// with the name of "fade", an entering element will
//以“淡入淡出”的名字，一个输入元素将会
// be given the class of "fade-enter"
//被赋予“淡入”类
transitionName='fade'
transitionName = '淡入'
// alternatively, you can specify the class for each
//或者，您可以为每个类指定类
// transition type
//过渡类型
transitionName={{
transitionName = {{
enter :  'hello',
输入:'你好'，
enterActive :  'hello-world',
enterActive :'hello-world'，
leave :  'goodbye',
离开_...“再见”
...
...
appearActive :  'whoa'
出现活跃_...'whoa'
}}
}}
// pass a boolean to specify whether a transition
//传递一个布尔值来指定是否转换
// should be used.
//应该被使用。
Below are the default values.
以下是默认值。
transitionAppear={false}
transitionAppear = {FALSE}
transitionEnter={true}
transitionEnter = {TRUE}
transitionLeave={true}
transitionLeave = {TRUE}
// Specify the length of the transition.
//指定转换的长度。
The transition
过渡
// classes will be removed after the duration (in ms)
//持续时间之后，类将被删除（以毫秒为单位）
transitionEnterTimeout={1000}
transitionEnterTimeout = {1000}
transitionLeaveTimeout={500}
transitionLeaveTimeout = {500}
transitionEnterTimeout={250}
transitionEnterTimeout = {250}
>
>
</CSSTransitionGroup>
</ CSSTransitionGroup>


### 一个小例子 ###
Below is an example application that fades elements in as the enter and out as they leave.
下面是一个示例应用程序，当他们离开时，淡入淡出元素。
You can see it in action on codepen.
你可以看到它在codepen上的行动。




* [只需4个步骤：使用 React 实现页面过渡动画 - CSDN博客 - 钱柜娱乐开户](http://www.tk4479.net/eyeofangel/article/details/76853044)
* [Animated page transitions with React Router 4, ReactTransitionGroup and Animated](https://hackernoon.com/animated-page-transitions-with-react-router-4-reacttransitiongroup-and-animated-1ca17bd97a1a)


ReactTransitionGroup，在2017年已经过时。
ReactCSSTransitionGroup 只适合简单的动画，例如列表。对于复杂动画无能为力。 据说有bug

	npm install --save react-transition-group
	npm install --save-dev react-transition-group

第3方的组件：有
BodySock是Bodymovin的React包装器组件，它使用GreenSocks TweenLite为Bodymovin时间轴设置动画。
这可以更好地控制Bodymovin动画，并且对于交互性特别有用。
可以以任何速度和时间沿着时间线的任何部分前后移动。
可以通过指定它们之间的过渡段来无缝地从一个段移动到另一个段（请参阅ToggleLoop）。

* [文档](https://chenyitian.gitbooks.io/react-docs/content/docs/10.1-animation.html)
* [lottie](https://chenqingspring.github.io/react-lottie/)
* [lottie Demo](https://chenqingspring.github.io/react-lottie/?selectedKind=Lottie%20Animation%20View&selectedStory=with%20control&full=0&down=1&left=1&panelRight=0&downPanel=kadirahq%2Fstorybook-addon-actions%2Factions-panel)
* [bodymovin](https://www.npmjs.com/package/bodymovin)
* [看起来很厉害的svg动画](https://codepen.io/airnan/pen/RazwzX)
* [MagicCube/movie-board: Re-design and implement Douban Movie with React and Redux.](https://github.com/MagicCube/movie-board)
* [chenglou/react-motion: A spring that solves your animation problems.](https://github.com/chenglou/react-motion)
* [Chat Heads](http://chenglou.github.io/react-motion/demos/demo1-chat-heads/)
* [Grid of Balls](http://chenglou.github.io/react-motion/demos/demo2-draggable-balls/)
* [RedoMVC](http://chenglou.github.io/react-motion/demos/demo3-todomvc-list-transition/)
* [How Many Demos Do You Need](http://chenglou.github.io/react-motion/demos/demo4-photo-gallery/)
* [Choose your weapon](http://chenglou.github.io/react-motion/demos/demo5-spring-parameters-chooser/)
* [Ripples](http://chenglou.github.io/react-motion/demos/demo7-water-ripples/)
* [Framer cards](http://chenglou.github.io/react-motion/demos/demo8-draggable-list/)
* [Gallery of third party React Motion demos · chenglou/react-motion Wiki](https://github.com/chenglou/react-motion/wiki/Gallery-of-third-party-React-Motion-demos)
* [React Deck](https://therewillbecode.github.io/react-poker/)
* [maisano/react-router-transition: painless transitions built for react-router, powered by react-motion](https://github.com/maisano/react-router-transition)
* [nkbt/react-collapse: Component-wrapper for collapse animation with react-motion for elements with variable (and dynamic) height](https://github.com/nkbt/react-collapse)
* [hugozap.neocities.org - 网络错误](https://hugozap.neocities.org/x99/)
* [Orbit](https://mac-s-g.github.io/js-playground/orbit/)
* 
### 解决特定问题的动画 ###
列表排列动画
特定问题的解决
* [React.js 数字渐变动画 - 计数器 - 踏得网](http://wow.techbrood.com/fiddle/14457)

* [react-flip-move](https://github.com/joshwcomeau/react-flip-move)
#### 参考 ####

* [velocity-react](https://github.com/google-fabric/velocity-react)
* [动画简历](https://github.com/ShiningDan/react-animation-resume)
* [claycooper](http://claycooper.la/)

	$ npm install --save velocity-react

已经过时：2015-10-11 react.js 0.14 之后， 
> To improve reliability, CSSTransitionGroup will no longer listen to transition events. Instead, you should specify transition durations manually using props such as transitionEnterTimeout={500}.

* [React.js 动画 - 陈三](https://zfanw.com/blog/react-js-animation.html)
* [khan](http://khan.github.io/react-components/)
* [React动画实践 - AlloyTeam](http://www.alloyteam.com/2016/01/react-animation-practice/)
* 
*  react-addons-transition-group可以用TweenLite
*   : 根据 animation hook 来实现动画，动画的具体实现方式可以使用 jQuery，css3 或者其他动画库如 gsap  
* [react中你们都是通过什么方式实现动画的？ - 知乎](https://www.zhihu.com/question/40746239)
* [collie](http://jindo.dev.naver.com/collie/)
* [React怎么做动画啊？ - 未分类 - React 中文](http://react-china.org/t/react/12831)
* 
* 一整个整体方案，
* [蚂蚁金服体验技术部-motion.ant](https://motion.ant.design/language/basic)
* [ant-motion-dva-cli-example](https://github.com/ant-motion/ant-motion-dva-cli-example)
* 一个师范例子[react-redux](https://github.com/meibin08/react-redux)
* 视频看不了
* [React 动画效果实现-极客学院](http://www.jikexueyuan.com/course/1589.html)
* 
* react动画插件
* [react.animate](https://github.com/pleasetrythisathome/react.animate)
* 
* 使用CSS切换来制作动画
* [ReactJS - Animations - 简单教程 - 简单编程](http://www.joymvp.com/2017/08/12/reactjs-basic-react-animations.html)


* 一些探讨
* [javascript – 什么是react.js友好的方式来动画列表重排序？ - 代码日志](https://codeday.me/bug/20171121/99173.html)
* [React.js: 非CSS动画_javascript_帮酷编程问答](https://ask.helplib.com/javascript/post_1157072)
* 
* 内置动画不好用
* [React.js開發入門教學(10)-動畫特效 - Leo's Blog](https://linmasahiro.github.io/2017/04/09/20170409_2/index.html)
* [ReactJS学习笔记八：动画 - CSDN博客](http://blog.csdn.net/lihongxun945/article/details/46778723)
* react-addons-css-transition-group
* [ReactJS动画 - vue教程](http://www.vue5.com/reactjs/reactjs_animations.html)
* [ReactJS动画](http://tutorialspoint.howtolib.com/reactjs/reactjs_animations.htm)
* [React动画的几种实现方式 - 不挑食的程序员 - SegmentFault](https://segmentfault.com/a/1190000007388260)
* 
* react更加低级的动画 ReactTransitionGroup
* [in Reactjs动画替换：如何在添加内容fade淡出之前等待淡出？_javascript_帮酷编程问答](https://ask.helplib.com/javascript/post_9068170)
* [react-css-transition-replace](https://github.com/marnusw/react-css-transition-replace)
* 