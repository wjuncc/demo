---
layout: post
title:  "CSS中的表格布局"
date:   2017-12-13 05:58:56 +0800
categories:  
tags: 
---



# CSS中的表格布局 #
CSS的渲染表格细节


瞥了一眼标题，表格布局？
就是我们力求避免的table？ 
不错，但本书不是用table布局。
而是CSS布局table的方式，这可比table要复杂多了。

与其它布局方式相比，表格很不一般。 
在flexbox和grid之前，表格本身就拥有将元素大小与其他元素相关联的独特功能，
例如，无论每个单元格包含多少内容，行中的所有单元格都具有相同高度。
每一列的单元格具有相同宽度。 
连接的单元格可以共享边框，即使两个单元格的边框样式非常不同。
而且，这些能力是以牺牲许多行为和规则为代价，过去常用这些行为和规则，有且只有用于表格。

## 表格格式 ##

在讲解如何绘制单元格边界和表格大小之前，
需要研究表格的基本组装方式以及表格中元素的相关方式。 
这被称为表格格式化，它与表格布局非常不同：只有格式化完成后才能进行布局。

### 视觉排列表格 ###

首先要了解的是CSS如何定义表格的排列方式。 
虽然有点基础，但它是理解如何最好地设计表格的关键。

CSS在 ** 表格元素（table elements） ** 和  ** 内部表格元素(internal table elements) ** 之间作了区分。 
在CSS中，内部表格元素生成具有内容，填充和边框的矩形框，但不包括边距。 
因此，无法通过指定单元格的边距来定义表格单元格之间的间距。 
符合CSS的浏览器将忽略任何将边距应用于单元格，行或任何其他内部表格元素的尝试（除了第14页的章节中讨论的标题外）。

有六个安排表的基本规则。 
这些规则的基础是一个网格单元，它是绘制表格的网格线之间的一个区域。
考虑图1，其中显示了两个表格__他们的网格单元由在表格上绘制的虚线表示。

图1. 网格单元格构成了表格布局的基础

在简单的2x2表格（如图1所示的左表）中，网格单元对应于实际的表格单元格。 
在更复杂的表格中，像图1的右边表格，一些表格单元格将跨越多个网格单元格，但是请注意，每个表格单元格边缘都沿着网格单元边缘放置。

这些网格单元在很大程度上是理论上的构造，它们不能通过文档对象模型（DOM）进行样式化或访问。 
它们只是用来描述如何组装表格以进行造型。

### 表格排列规则 ###

* 每个行框包含一行单元格。 
表格中的所有行框按照它们在源文档中出现的顺序从上到下填充表格（除表格的开头和结尾处出现任何表头或表格页脚行框外， 分别）。 
因此，表格包含与行元素（例如，tr元素）一样多的网格行。

* 行组框包含与其包含的行框相同的网格单元。

* 列框包含一列或多列网格单元格。 
所有列框都按照它们出现的顺序相邻放置。 
第一个列框在左边是从左到右的语言，右边是从右到左的语言。 
“列组”框包含与其包含的列框相同的网格单元格。

* 单元格框不能超出表或行组的最后一个行框。 
如果表结构会导致这种情况，那么必须缩小单元格，直到它适合包含它的表或行组。



[!]CSS规范不鼓励，但不禁止表格单元和其他内部表格元素的定位。 
例如，想要定义合并单元行（row-spanning），可以删除全部row，这样就能改变布局，
从而从其他行中删除合并单元行。
尽管如此，确实可以在现行浏览器中对表格元素进行定位。

根据定义，grid cells是矩形，但大小并不一定相同。 
列（grid column）中所有单元格宽度相同，
行（grid row）中所有单元格高度相同，
但行和行高度不等。
列和列宽度不等。

这里有一个问题：究竟哪些元素是cell，哪些不是cell？


### 表格显示值 ###

在HTML中，因为有tr和td，一眼就看出哪些元素是表格元素。
在XML中，则无从知晓。
观察以下数据：

	显示

	值：none| inline| block| inline-block| list-item| run-in| table| inline-table| table-row-group| table-header-group| tablefooter-group| table-row| table-column-group| table-column| table-cell| table-caption| inherit
	
	初始值：inline
	适用于：所有元素
	继承：No
	计算值：浮动，定位和根元素的变化（参见CSS2.1，第9.7节）;其他，如指定；
	注意：CSS2中这些值没错，但是在CSS2.1中，由于缺乏广泛的支持而删除了。

本文只关注表格相关值，其他（block, inline, inline-block, run-in, 和 list-item）超出了表格的范围。
表格相关值总结如下：

** 表 ** 

	该值指定一个元素定义一个块级表。 
	因此，它定义了一个生成块框的矩形块。 
	相应的HTML元素是，毫不奇怪，表。
	直列表

** inline-table ** 
	该值指定一个元素定义一个内联级别的表。 
	这意味着元素定义了一个生成内联框的矩形块。 
	最接近的非表格模拟是内联块的值。
	最接近的HTML元素是表格，但默认情况下，HTML表格不是内联的。

 ** table-row ** 

该值指定一个元素是一行表格单元格。 
相应的HTML元素是tr元素。

** table-row-group **

	指定一个元素对一个或多个表格行进行分组。 对应HTML的tbody。

** table-header-group **

	非常像table-row-group，不同之处在于对于可视化格式，标题行组始终显示在所有其他行和行组之前，并且在任何顶部标题之后。
	在打印中，如果一个表需要打印多个页面，用户代理可能会在每个页面的顶部重复标题行（例如，Firefox会这样做）。 
	该规范没有定义如果将table-header-group分配给多个元素会发生什么情况。
	标题组可以包含多行。
	对应HTM的thead。

** table-footer-group **

	这个值非常像table-header-group，除了页脚行组总是显示在所有其他行和行组之后，以及任何底部标题之前。
	在打印中，如果一个表格需要打印多个页面，用户代理可能会在每个页面的底部重复页脚行。
	规范没有定义如果将table-footer-group分配给多个元素会发生什么情况。
	对应HTML的tfoot。

** table-column ** 
	
	这个值声明一个元素描述一列表格单元格。 
	在CSS术语中，具有这个显示值的元素不是可视化的，就好像它们的值是none。 
	它们的存在主要是为了帮助定义列中单元格的表示。
	对应HTML的col。

** table-column-group ** 

	此值声明一个元素组合一个或多个列。 
	与表列元素一样，不会呈现表列组元素，但是该值对于定义列组中元素的显示非常有用。 
	等价的HTML是colgroup元素。

** 表单元格 ** 

	此值指定一个元素表示表中的单个单元格。 
	HTML元素th和td都是表格元素的例子。

** table-caption ** 
	这个值定义了一个表格标题。  
	CSS没有定义如果多个元素具有值标题，会发生什么情况，但是它明确地警告，作者不应该在表或内联表元素中放置多个具有显示：标题的元素。

可以通过从CSS 2.1规范的附录D中给​​出的示例HTML 4.0样式表中摘录一个摘要来总结这些值的一般效果：

	table {display: table;}
	tr {display: table-row;}
	thead {display: table-header-group;}
	tbody {display: table-row-group;}
	tfoot {display: table-footer-group;}
	col {display: table-column;}
	colgroup {display: table-column-group;}
	td, th {display: table-cell;}
	caption {display: table-caption;}


在XML中，默认情况下元素没有显示语义，这些值变得非常有用。 
考虑以下标记： 

	<scores>
		<headers>
			<label>Team</label>
			<label>Score</label>
		</headers>
		<game sport="MLB" league="NL">
			<team>
				<name>Reds</name>
				<score>8</score>
			</team>
			<team>
				<name>Cubs</name>
				<score>5</score>
			</team>
		</game>
	</scores>

用以下css格式化：

	scores {display: table;}
	headers {display: table-header-group;}
	game {display: table-row-group;}
	team {display: table-row;}
	label, name, score {display: table-cell;}

然后，可以根据需要对各种单元格进行样式设置，例如粗体显示标签元素并将分数右对齐。

### 行首位 ###

CSS将其表格模型定义为行首。
换句话说，该模型假定作者将创建标记语言，其中显式声明了行。
另一方面，列是从单元行的布局派生的。
因此，第一列由每行中的第一个单元格组成;
第二列由第二个单元组成，等等。
行优先级不是HTML中的主要问题，其中标记语言已经是面向行的。
在XML中，它具有更多的影响，因为它限制了作者定义表格标记的方式。
由于CSS表模型的面向行的特性，以表格布局为基础的标记语言实际上是不可能的（假设用CSS来呈现这样的文档）。

### 列 ###

尽管CSS表格模型是面向行的，但列仍然在布局中起作用。 
一个单元格可以属于上下文（行和列），即使它是从文档源中的行元素开始的。
然而，在CSS中，列和列组只能接受四个不可修改的属性_... border，background，width和visibility。
另外，这四个属性中的每一个都有特殊的规则，仅适用于上下文中_.._

只有在属性border-collapse具有值collapse的情况下，才可以为列和列组设置边框边框。
在这种情况下，列和列组边框参与折叠算法，在每个单元边缘设置边框样式。 ","In such circumstances, column and column-group borders participate in the collapsing algorithm that sets the border styles at each cell edge.",null,null,3],["（请参阅第20页上的折叠单元格边界部分。）
背景

列或列组的背景仅在单元格及其行具有透明背景的单元格中可见。 ","The background of a column or column group will be visible only in cells where both the cell and its row have transparent backgrounds.",null,null,3],["（请参阅第12页的表格层。）
width width属性定义列或列组的最小宽度。","width The width property defines the minimum width of the column or column group.",null,null,3],["列（或组）内的单元格内容可能会强制列变宽。
可见性如果列或列组的可见性值为折叠状态，则不会呈现列（或组）中的单元格。","visibility If the value of visibility for a column or column group is collapse, then none of the cells in the column (or group) are rendered.",null,null,3],["从折叠列跨越到其他列的单元格将被剪切，从其他列跨越到隐藏列的单元格也将被剪切。","Cells that span from the collapsed column into other columns are clipped, as are cells that span from other columns into the hidden column.",null,null,3],["此外，表的总宽度减少了列将占用的宽度。","Furthermore, the overall width of the table is reduced by the width the column would have taken up.",null,null,3],["对于列或列组，将忽略隐藏以外的任何可见性值的声明。



匿名表对象
标记语言可能没有足够的元素来完整地表示表格，因为它们是在CSS中定义的，或者作者将忘记包含所有必要的元素。","There is the possibility that a markup language might not contain enough elements to fully represent tables as they are defined in CSS, or that an author will forget to include all the necessary elements.",null,null,3],["例如，考虑这个HTML _.._
\u003c表\u003e

\u003ctd\u003e名称_.._ \u003c/ td\u003e

\u003ctd\u003e \u003cinput type =“text”\u003e \u003c/ td\u003e

\u003c/ TABLE\u003e

你可以看一下这个标记，并假定它定义了一个单行的双单元表格，但从结构上说，没有定义行的元素（因为tr缺失）。
为了覆盖这种可能性，CSS定义了一个机制来将缺失的表组件作为匿名对象插入。","To cover such possibilities, CSS defines a mechanism for inserting missing table components as anonymous objects.",null,null,3],["有关如何工作的基本示例，让我们重新访问我们的缺少行HTML示例。","For a basic example of how this works, lets revisit our missing-row HTML example.",null,null,3],["用CSS来说，有效的做法是在表元素和下降表单元格之间插入一个匿名的表行对象_.._
\u003c表\u003e

\u003c！ - 匿名表格行对象开始 - \u003e

\u003ctd\u003e名称_.._ \u003c/ td\u003e

\u003ctd\u003e \u003cinput type =“text”\u003e \u003c/ td\u003e

\u003c！ - 匿名表格行对象结束 - \u003e

\u003c/ TABLE\u003e

图2给出了这个过程的可视化表示，其中虚线表示插入的匿名表格行。

## 匿名表对象 ##

用CSS定义表格,标记语言可能不包含足够的元素
完全，或者作者会忘记包括所有必要的元素。 例如，考虑这个HTML:

	<table>
		<td>Name:</td>
		<td><input type="text"></td>
	</table>

初看代码，像是定义一行2列的表格
，但在结构上，没有定义行元素（因为tr缺失）。

考虑到这种可能，CSS定义了一个插入缺失表格的机制组件作为匿名对象。
要了解其工作原理，以缺少行的HTML为例。 
就CSS来说，有效地发生的是一个
在表格元素和它的descendant表格之间插入一个匿名row对象：

	<table>
		<!--匿名表格行对象开始-->
		<td>Name:</td>
		<td><input type="text"></td>
		<!--匿名表格行对象结束-->
	</table>

图2给出了这个过程的图示，虚线表示插入的匿名行。

图2.表格格式化中的匿名对象生成

CSS表格模型中可能会出现七种不同类型的匿名对象插入。 
这七条规则，就像继承和特殊性一样，
试图在CSS的行为方式上强加直观感觉的机制例子。

### 对象插入规则 ###

1.如果元素父项不是行元素，则在单元格元素与其父元素之间插入匿名row元素。该 
插入的对象将包含表格单元元素的所有连续的同胞。
考虑以下样式和标记：

	system {display: table;}
	name, moons {display: table-cell;}

	<system>
		<name>Mercury</name>
		<moons>0</moons>
	</system>

匿名row对象插入到单元格元素和system元素之间，并包含name和moons元素。

即使父元素是表行组(table-row-group)，也是如此。扩展前面的例子，假定以下情况适用：

	system {display: table;}
	planet {display: table-row-group;}
	name, moons {display: table-cell;}

	<system>
		<planet>
			<name>Mercury</name>
			<moons>0</moons>
		</planet>
		<planet>
			<name>Venus</name>
			<moons>0</moons>
		</planet>
	</system>

在这个例子中，两组单元格将被包含在一个匿名的table-row中
插入它们和planet元素之间的对象。

2.如果表格行元素父项不是表格，内联表格或表格行表格，
group元素，然后在它们之间插入一个匿名表格元素
表行元素及其父元素","table-row element and its parent.",null,null,3],["插入的对象将包括所有连续的
表格元素的兄弟。","siblings of the table-row element.",null,null,3],["考虑以下样式和标记_.._

docbody {display _.._ block;}
星球{display_.._ table-row;}

\u003cdocbody\u003e
\u003c行星\u003e
\u003c名称\u003e汞\u003c/名称\u003e
\u003c卫星\u003e 0 \u003c/卫星\u003e
\u003c/行星\u003e
\u003c行星\u003e
\u003c名称\u003e金星\u003c/名称\u003e
\u003c卫星\u003e 0 \u003c/卫星\u003e

表格格式化_9


#### 参考 ####

* [blog.csdn.net/qq_36482772/article/details/78049851](http://blog.csdn.net/qq_36482772/article/details/78049851)