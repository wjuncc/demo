---
layout: post
title:  "Babel教程索引"
date:   2017-11-23 03:38:49 +0800
categories:  
tags: 
    - react 

---

local directory：

```powershell
cd E:\n\learn\react\css\demo3
```


```powershell
cd yourProject
npm init
npm install --save-dev babel-cli babel-preset-es2015
// 用來產生 .babelrc 設定
echo '{ "presets": ["es2015"] }' > .babelrc
```

and terminal  throw a error:

```bat
npm WARN deprecated babel-preset-es2015@6.24.1: �  Thanks for using Babel: we recommend using babel-preset-env now: please read babeljs.io/env to update!
```

Babel已经启弃用了babel-preset-es2015，现在最新启用的是babel-preset-env

```powershell
npm install babel-preset-env --save-dev
```

Right click in folder and create new file, webpack.config.js

```javascript
var webpack = require('webpack');
var path = require('path');

var BUILD_DIR = path.resolve(__dirname, 'src/client/public');
var APP_DIR = path.resolve(__dirname, 'src/client/app');

var config = {
  entry: APP_DIR + '/index.jsx',
  output: {
    path: BUILD_DIR,
    filename: 'bundle.js'
  }
};

module.exports = config;
```

Create index.jsx file in the “src/client/app” and add console.log('Hello World!'); in it.

```powershell
mkdir src/client/app
```


```javascript
console.log('Hello World!');
```


In the terminal run the following command

Windows
node_modules\.bin\webpack -d


```powershell
mkdir src/client
```
### Setting Up Babel-Loader ###
By using JSX and ES6 we can be more productive while working with React, so we need to install the following npm packages.

	npm i babel-core babel-loader babel-preset-es2015 babel-preset-react -S

	npm install babel-preset-env -S

OR

	npm install babel-preset-env --save-dev

Now we need to create .babelrc file


Windows
Create a b.babelrc file then in CMD
ren b.babelrc .babelrc

Open file and add
.babelrc：

	
	{
	  "presets" : ["es2015", "react"]
	}


Now we need to tell Webpack to use the babel-loader while bundling the files, open webpack.config.js file and update it as below

```javascript
// Existing Code ....
var config = {
  // Existing Code ....
  module : {
    loaders : [
      {
        test : /\.jsx?/,
        include : APP_DIR,
        loader : 'babel-loader'
      }
    ]
  }
}
```

### Lets get some text out ###

Use npm to install react and react-dom

	npm i react react-dom -S

Replace the existing console.log statement in the index.jsx with the following content



```javascript
import React from 'react';
import {render} from 'react-dom';

class App extends React.Component {
  render () {
    return <p> Hello React project</p>;
  }
}

render(<App/>, document.getElementById('app'));
```


Run the following command to update the bundle file with the new changes

Linux
./node_modules/.bin/webpack -d
Windows

	node_modules\.bin\webpack -d

ERROR:

```powershell
PS E:\n\learn\react\css\demo3> node_modules\.bin\webpack -d
Hash: 4147fb0883a0e44773ed
Version: webpack 3.10.0
Time: 30ms

ERROR in Entry module not found: Error: Can't resolve 'babel-loader' in 'E:\n\learn
PS E:\n\learn\react\css\demo3>
```
RUN:

```powershell
npm install babel-loader -save-dev
```



Open the index.html in the browser, you can see Hello React, be proud ;)

Add component…
Create a new file AwesomeComponent.jsx and update it as below

import React from 'react';

class AwesomeComponent extends React.Component {

  constructor(props) {
    super(props);
    this.state = {likesCount : 0};
    this.onLike = this.onLike.bind(this);
  }

  onLike () {
    let newLikesCount = this.state.likesCount + 1;
    this.setState({likesCount: newLikesCount});
  }

  render() {
    return (
      <div>
        Likes : <span>{this.state.likesCount}</span>
        <div><button onClick={this.onLike}>Like Me</button></div>
      </div>
    );
  }

}

export default AwesomeComponent;
Then include it in the index.jsx file

// ...
import AwesomeComponent from './AwesomeComponent.jsx';
// ...
class App extends React.Component {
  render () {
    return (
      <div>
        <p> Hello React Project</p>
        <AwesomeComponent />
      </div>
    );
  }
}

// ...
If your Webpack is already running in watch mode or you have updated, then refresh the browser to see the AwesomeComponent in action.

otherwise run

Linux
./node_modules/.bin/webpack -d --watch
Windows
node_modules\.bin\webpack -d --watch
As I said in the beginning not really in depth explanations on why you should do this, but hopefully it was lightning fast and clear for you to get your first React.js project up and running.

JavaScriptReactBabelWebpackNPM
One clap, two clap, three clap, forty?



#### Babel教程索引 ####

simple

* Mar 31,2017 [Setup React.js with Npm, Babel 6 and Webpack in under 1 hour](https://medium.com/@fastlane80/setup-react-js-with-npm-babel-6-and-webpack-in-under-1-hour-1a714f973506)
* Jul 7, 2016 [使用 Babel CLI – Chialin Shih – Medium](https://medium.com/@chialin/使用-babel-cli-e18ee5541646)


document

* [Babel](http://babeljs.io/docs/plugins/preset-es2015/)
* [Search and find – Medium](https://medium.com/search?q=Babel%20)
* [Misunderstanding ES6 Modules, Upgrading Babel, Tears, and a Solution](https://blog.kentcdodds.com/misunderstanding-es6-modules-upgrading-babel-tears-and-a-solution-ad2d5ab93ce0)
* [How writing custom Babel & ESLint plugins can increase productivity & improve user experience](https://blog.kentcdodds.com/how-writing-custom-babel-and-eslint-plugins-can-increase-your-productivity-and-improve-user-fd6dd8076e26)
* [Improve React performance with Babel – Doctolib Engineering – Medium](https://medium.com/doctolib-engineering/improve-react-performance-with-babel-16f1becfaa25)
* [Setting up Flow when you’ve already got Babel in place](https://medium.freecodecamp.org/using-flow-with-babel-c04fdca8d14d)
* [Building modular javascript applications in ES6 with React, Webpack and Babel](https://towardsdatascience.com/building-modular-javascript-applications-in-es6-with-react-webpack-and-babel-538189cd485f)
* [Setting up your React /ES6 Development environment with Webpack, Express and Babel](https://blog.hellojs.org/setting-up-your-react-es6-development-environment-with-webpack-express-and-babel-e2a53994ade)
* [Start Using Babel 7 Beta Today! – Jeff Dolle – Medium](https://medium.com/@jdolle/babel-7-beta-instructions-aed5cf17048b)
* [Setup React.js with Npm, Babel 6 and Webpack in under 1 hour](https://medium.com/@fastlane80/setup-react-js-with-npm-babel-6-and-webpack-in-under-1-hour-1a714f973506)
* [Quick guide: how to update Babel 5.x -> 6.x – Serg Gospodarets – Medium](https://medium.com/@malyw/how-to-update-babel-5-x-6-x-d828c230ec53)
* [How to Build and Publish ES6 Modules Today, with Babel and Rollup](https://medium.com/@tarkus/how-to-build-and-publish-es6-modules-today-with-babel-and-rollup-4426d9c7ca71)
* [10 minute JavaScript: Library development in ES6 with Babel, Mocha and npm scripts](https://blog.hellojs.org/10-minute-javascript-library-development-in-es6-with-babel-mocha-and-npm-scripts-9f08b22e69c3)
* [How to implement testing + code coverage on React with Karma, Babel, and Webpack](https://medium.com/@scbarrus/how-to-get-test-coverage-on-react-with-karma-babel-and-webpack-c9273d805063)
* [React Tutorial 1.5: Utilizing Webpack and Babel to build a React.js App](https://tylermcginnis.com/react-js-tutorial-1-5-utilizing-webpack-and-babel-to-build-a-react-js-app/)
* [Babel is dead! How to publish native ES modules with Node v8.5.0+](https://medium.com/@dandv/publishing-native-es-modules-with-node-v8-5-0-730736e0f612)
* [Coding News Summary #2 — Prettier, Safari, D language, Babel, and more](https://edgecoders.com/coding-news-summary-2-prettier-safari-d-language-babel-and-more-bbcea7ce992c)